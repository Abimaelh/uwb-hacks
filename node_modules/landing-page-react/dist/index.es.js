import React, { Component } from 'react';
import PropTypes from 'prop-types';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "/* add css styles here (optional) */\n\n.styles_test__32Qsm {\n  display: inline-block;\n  margin: 2em auto;\n  border: 2px solid #000;\n  font-size: 2em;\n}\n";
var styles = { "test": "styles_test__32Qsm" };
styleInject(css);

var css$1 = ".Button_button__YT89f {\n \t-webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    display: inline-block;\n    margin-top: 1em;\n    margin-bottom: 9px;\n    padding: 1em 1em;\n    border-color: black;\n    opacity: 1;\n    text-align: center;\n    line-height: 17px;\n    margin: 5px 7px;\n    transition: all 0.5s ease;\n    margin-bottom: 0px;\n    background-color: blue;\n    color: white;\n}\n\n.Button_button__YT89f:hover {\n    background: black;\n}\n\n.Button_word__1W1Xx {\n    font-weight: bold;\n    font-size: 1.1em;\n}";
var styles$1 = { "button": "Button_button__YT89f", "word": "Button_word__1W1Xx" };
styleInject(css$1);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Button = function (_Component) {
  inherits(Button, _Component);

  function Button() {
    classCallCheck(this, Button);
    return possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  createClass(Button, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          onClick = _props.onClick,
          text = _props.text;

      var showText = function showText() {
        return text ? text : function () {
          return " ";
        };
      };

      return React.createElement(
        "div",
        { className: styles$1.button, onClick: onClick ? onClick : function () {} },
        React.createElement(
          "span",
          { className: styles$1.word },
          showText()
        )
      );
    }
  }]);
  return Button;
}(Component);

var ExampleComponent = function (_Component) {
  inherits(ExampleComponent, _Component);

  function ExampleComponent() {
    classCallCheck(this, ExampleComponent);
    return possibleConstructorReturn(this, (ExampleComponent.__proto__ || Object.getPrototypeOf(ExampleComponent)).apply(this, arguments));
  }

  createClass(ExampleComponent, [{
    key: 'render',
    value: function render() {
      var text = this.props.text;


      return React.createElement(
        'div',
        { className: styles.test },
        'Example Component: ',
        text
      );
    }
  }]);
  return ExampleComponent;
}(Component);

ExampleComponent.propTypes = {
  text: PropTypes.string
};

export default ExampleComponent;
export { Button };
//# sourceMappingURL=index.es.js.map
